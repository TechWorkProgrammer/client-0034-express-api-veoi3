import {Worker} from 'bullmq';
import {GenerateStatus} from '@prisma/client';
import Variables from "@/config/Variables";
import VideoService from "@/service/VideoService";
import VertexAIService from "@/service/VertexAIService";
import NotificationController from "@/controller/NotificationController";

Variables.boot();

const connectionOptions = {
    host: Variables.REDIS_HOST,
    port: Variables.REDIS_PORT,
    password: Variables.REDIS_PASSWORD,
};

console.log("ðŸš€ Video generation worker started...");

const worker = new Worker('video-generation', async job => {
    const {videoResultId, userId, jobData} = job.data;
    console.log(`[WORKER] Processing job ${job.id} for videoResult: ${videoResultId}`);

    try {
        await VideoService.updateGenerationStatus(videoResultId, GenerateStatus.PROCESSING);

        const predictions = await VertexAIService.generateVideo(jobData, videoResultId);

        const downloadedFiles = [];
        for (const prediction of predictions) {
            const gcsUri = prediction.structValue?.fields?.gcsUri?.stringValue;
            if (gcsUri) {
                const localVideoUrl = await VertexAIService.downloadAndSave(gcsUri);
                downloadedFiles.push({videoUrl: localVideoUrl, thumbnailUrl: null});
            }
        }

        if (downloadedFiles.length === 0) {
            throw new Error("No video files were generated by the AI service.");
        }

        await VideoService.addVideoFiles(videoResultId, downloadedFiles);

        await VideoService.updateGenerationStatus(videoResultId, GenerateStatus.COMPLETED);

        await NotificationController.sendNotification({
            userId,
            title: 'Video Generation Complete!',
            message: `Your video for prompt "${jobData.prompt.substring(0, 30)}..." is now ready.`,
            type: 'SUCCESS'
        });

        console.log(`[WORKER] Job ${job.id} completed successfully.`);

    } catch (error: any) {
        console.error(`[WORKER] Job ${job.id} failed:`, error.message);

        await VideoService.handleFailedGeneration(videoResultId, error.message);

        await NotificationController.sendNotification({
            userId,
            title: 'Video Generation Failed',
            message: `We encountered an error. Your tokens have been refunded.`,
            type: 'ERROR'
        });

        throw error;
    }
}, {connection: connectionOptions});

worker.on('failed', (job, err) => {
    console.error(`Job ${job?.id} has failed with error: ${err.message}`);
});